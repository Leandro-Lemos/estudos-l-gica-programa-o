>>>> Posicionamento--------------------------- 
> padrão: tipo block e um abaixo do outro (static);

> relative --- ativa funções "top", "right", "botton", "z-index" do elemento em questão selecionado. 

> absolute --- é como se tivesse criado uma nova camada de layout para aquele elemento. Ela se posiciona em relação a toda a página "body" ou ao elemento pai ex, "main". Ativa funções "top", "right", "botton", "z-index". 

> fixed --- fixar elemento para não seguir rolagem da página. 

> Sobreposição camadas > O z-index padrão é o último elemento se sobrepondo aquele acima, mas se alterar  o valor de Z- index para camadas superiores aí o elemento pode ficar no "topo". 


Flex- Box -------------------------------------

> padrão: tipo block com disposição vertical 

> display: flex --- torna a disposição horizontal.

> flex-direction: column --- volta os elementos a disposição coluna. 







Anotação extra questão de alinhamento ao centro;
body {
    height:100vh; (100% da tela)
    margin:0;
    display:flex;
    align-items:center
}

.conteiner {
    width: 100vh;
    display:flex;
    justify-content:center;
}


GRID ---------------------------------
O grid é interessante para montar a estrutura geral em linhas e colunas. É possível depois ajustes mais finos com flex-box. 

Criar colunas ou linhas

>>>> A medidas como por exemplo 1fr são flexíveis. 

--- grid -template-columns: 3fr 1fr (ocupa 3 porções e 1 porção da tela)

--- grid-template-rows:20vh 70vh 10vh (aqui são porções da tela, mas poderia usar fr também)

--- grid-gap: 20px 5px (20px de espaço horizontal e 5 vertical, se deixar apenas 20px aplica igual nas duas dimensões)

--- Dispor itens considerando colunas e linhas:
Exemplo para um item avançar mais colunas num conteiner com duas colunas:
header {
    grid-column-start 1;
    grid-column-end:3;
}
É como se header avançasse até o final da linha virtual vertical 3, que o final da coluna 02. 

É possível simplificar com: 
header {
    grid-column: 1/3;
    grid-row: 3/4;
}

Pode ser ainda mais simples usando o >>> Grid template areas como no exemplo abaixo. É como distribuir repetindo os nomes por quais colunas deve ocupar. 

Alinhamento do item em relação a div que ele corresponde:
justify-self:end; (final do da div a direita)

--- Exemplo de um grid:
body {
    height:100 vh;
    display:grid;
    grid-template-areas:
    "header header"
    "main aside"
    "footer footer";
    grid-template-rows: 30px 1fr 40px;
    grid-template-columns: 1fr 80px;
}

header {
    grid-area:header;
    background-color:green;
}

main {
    grid-area: header;
    background-color: red;
}

aside {
    grid-area:main;
    background-color: blue;
}

footer {
    grid-area: footer;
    background: black;
}

p {
    color: white; 
}

>>> Alinhamento do GRID
Alinhando a DIV com o grid base em relação ao espaço da tela, por exemplo "body"
-- justify-content:alinha horizontal em relação ao espaço vazio.
-- align-itens: alinha vertical. (start, center, end)



